class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class LinkedList {

    constructor(value) {

        if(!value) {
            this.head = null;
            this.tail = null;
            this.length = 0;
            return;
        }
        const node = new Node(value);
        this.head = node;
        this.tail = this.head;
        this.length = 1;
    }

    push(value) {
        const node = new Node(value);
        if (!this.head) {
            this.head = this.tail = node;
        } else {
            this.tail.next = node;    
            this.tail = node;
        }
        this.length++;
        return this;
    }

    pop() {

        if (!this.head) {
            return undefined;
        }

        var prevNode, tempNode;
        
        prevNode = tempNode = this.head;
        
        while(tempNode.next) {
            prevNode = tempNode;
            tempNode = tempNode.next;    
        }
        
        this.tail = prevNode;
        this.tail.next = null;
        this.length--;

        if (this.length === 0) {
            this.head = this.tail = null;
        }
        
        return tempNode;
    }
    
    unshift(value) {
        const newNode = new Node(value);

        if (!this.head) {
            this.head = newNode;
            this.tail = newNode;
        } else {
            var tempHead = this.head;
            this.head = newNode;
            this.head.next = tempHead;
        }
        this.length++;
        return this;
    }

    shift() {
        if (!this.head) {
            return undefined;
        }
        let tempHead = this.head;
        this.head = this.head.next;
        tempHead.next = null;
        this.length--;
        
        if (this.length === 0) {
            this.tail = null;
        }
        return tempHead;
    }

    get(index) {
        if (index < 0 || index >= this.length) {
            return undefined;
        }
        let tempHead = this.head;
        
        for (let i = 0; i < index; i++) {
            tempHead = tempHead.next;
        }
        return tempHead; 
        
    }

    set(index, value) {
        let temp = this.get(index);
        if (temp) {
            temp.value = value;    
            return true;
        }
        return false;
    }

    insert(index, value) {
        if (index === 0) {
           return this.unshift(value); 
        }
        
        if (index === this.length) {
            return this.push(value);
        }

        if(index < 0 || index >= this.length) {
            return false;
        }

        const newNode = new Node(value);
        const tempNode = this.get(index - 1);
        newNode.next = tempNode.next;
        tempNode.next = newNode;
        this.length++;
        return true;
    }

    remove(index) {

        if (index === 0) {
           return this.shift(value);
        }
        if (index === this.length - 1) {
            return this.pop();
        }
        if (index < 0 || index >= this.length) {
            return undefined;
        }

        const prevNode = this.get(index - 1);
        const tempNode = prevNode.next;
        prevNode.next = tempNode.next;
        tempNode.next = null;
        this.length--;
        return tempNode;
        
    }

    // COMPLEX METHOD
    reverse() {
        let temp = this.head;
        this.head = this.tail;
        this.tail = temp;

        let prev = null;
        let next = temp.next;

        for(let i = 0; i < this.length; i++) {
            next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
        }
        return this;
    }
}

const ls = new LinkedList(1);
ls.push(2);
ls.push(2);
ls.push(3);


// NOTE: Node is just an object with the following properties (value, next)
// It's all about storing and updating the references of the Node to properties of linkedlist class inside
// following properties (this.head, this.tail, tempNode, prevNode, tempHead)
// Use already created internal methods for other method of LL class.


